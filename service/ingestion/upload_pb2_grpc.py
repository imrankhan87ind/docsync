# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import upload_pb2 as upload__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in upload_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class UploadServiceStub(object):
    """UploadService defines a service for uploading files.
    The upload process is designed to be resilient and efficient, checking for
    duplicates before the upload starts.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadFile = channel.stream_unary(
                '/upload.UploadService/UploadFile',
                request_serializer=upload__pb2.UploadFileRequest.SerializeToString,
                response_deserializer=upload__pb2.UploadFileResponse.FromString,
                _registered_method=True)


class UploadServiceServicer(object):
    """UploadService defines a service for uploading files.
    The upload process is designed to be resilient and efficient, checking for
    duplicates before the upload starts.
    """

    def UploadFile(self, request_iterator, context):
        """UploadFile handles a file upload via a client-side stream.
        The client must send a FileInfo message as the first message in the stream.
        The server will check if a file with the same sha256 hash already exists.

        - If the file already exists, the RPC will be terminated with an `ALREADY_EXISTS`
        status code.
        - If the file is new, the server will accept the subsequent stream of byte
        chunks.

        After all chunks are sent, the client should half-close the stream. The server
        will then verify the integrity of the received file against the provided sha256
        hash.

        - On successful verification, an `UploadFileResponse` is returned with an `OK`
        status.
        - If verification fails, the RPC is terminated with a `DATA_LOSS` status code.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UploadServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadFile': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadFile,
                    request_deserializer=upload__pb2.UploadFileRequest.FromString,
                    response_serializer=upload__pb2.UploadFileResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'upload.UploadService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('upload.UploadService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UploadService(object):
    """UploadService defines a service for uploading files.
    The upload process is designed to be resilient and efficient, checking for
    duplicates before the upload starts.
    """

    @staticmethod
    def UploadFile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/upload.UploadService/UploadFile',
            upload__pb2.UploadFileRequest.SerializeToString,
            upload__pb2.UploadFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
